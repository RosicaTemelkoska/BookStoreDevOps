// <auto-generated />
using System;
using Bookstore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bookstore.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250624171511_AddRowVersionToCustomer")]
    partial class AddRowVersionToCustomer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bookstore.Domain.Addresses.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Bookstore.Domain.Books.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BookTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ConditionId")
                        .HasColumnType("integer");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookTypeId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("GenreId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Li Juan",
                            BookTypeId = 1,
                            ConditionId = 5,
                            CoverImageUrl = "/images/coverimages/apocalypse.png",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5721),
                            GenreId = 13,
                            ISBN = "6556784356",
                            Name = "2020: The Apocalypse",
                            Price = 10.95m,
                            PublisherId = 15,
                            Quantity = 25,
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5721)
                        },
                        new
                        {
                            Id = 2,
                            Author = "Nikki Wolf",
                            BookTypeId = 1,
                            ConditionId = 6,
                            CoverImageUrl = "/images/coverimages/childrenofiron.png",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5728),
                            GenreId = 11,
                            ISBN = "7665438976",
                            Name = "Children Of Iron",
                            Price = 13.95m,
                            PublisherId = 16,
                            Quantity = 3,
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5728)
                        },
                        new
                        {
                            Id = 3,
                            Author = "Richard Roe",
                            BookTypeId = 1,
                            ConditionId = 5,
                            CoverImageUrl = "/images/coverimages/goldinthedark.png",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5732),
                            GenreId = 13,
                            ISBN = "5442280765",
                            Name = "Gold In The Dark",
                            Price = 6.50m,
                            PublisherId = 17,
                            Quantity = 10,
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5732)
                        },
                        new
                        {
                            Id = 4,
                            Author = "Pat Candella",
                            BookTypeId = 2,
                            ConditionId = 7,
                            CoverImageUrl = "/images/coverimages/leaguesofsmoke.png",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5735),
                            GenreId = 11,
                            ISBN = "4556789542",
                            Name = "Leagues Of Smoke",
                            Price = 3m,
                            PublisherId = 18,
                            Quantity = 1,
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5736)
                        },
                        new
                        {
                            Id = 5,
                            Author = "Carlos Salazar",
                            BookTypeId = 2,
                            ConditionId = 5,
                            CoverImageUrl = "/images/coverimages/alonewiththestars.png",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5738),
                            GenreId = 12,
                            ISBN = "4563358087",
                            Name = "Alone With The Stars",
                            Price = 15.95m,
                            PublisherId = 19,
                            Quantity = 5,
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5738)
                        },
                        new
                        {
                            Id = 6,
                            Author = "Terri Whitlock",
                            BookTypeId = 1,
                            ConditionId = 6,
                            CoverImageUrl = "/images/coverimages/girlinthepolaroid.png",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5740),
                            GenreId = 12,
                            ISBN = "2354435678",
                            Name = "The Girl In The Polaroid",
                            Price = 8.25m,
                            PublisherId = 20,
                            Quantity = 2,
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5740)
                        },
                        new
                        {
                            Id = 7,
                            Author = "Mary Major",
                            BookTypeId = 2,
                            ConditionId = 5,
                            CoverImageUrl = "/images/coverimages/1001jokes.png",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5742),
                            GenreId = 11,
                            ISBN = "6554789632",
                            Name = "1001 Jokes",
                            Price = 13.95m,
                            PublisherId = 21,
                            Quantity = 7,
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5743)
                        },
                        new
                        {
                            Id = 8,
                            Author = "Mateo Jackson",
                            BookTypeId = 3,
                            ConditionId = 7,
                            CoverImageUrl = "/images/coverimages/mysearchformeaning.png",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5744),
                            GenreId = 8,
                            ISBN = "4558786554",
                            Name = "My Search For Meaning",
                            Price = 5m,
                            PublisherId = 22,
                            Quantity = 15,
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5745)
                        });
                });

            modelBuilder.Entity("Bookstore.Domain.Carts.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("Bookstore.Domain.Carts.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("WantToBuy")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartItem");
                });

            modelBuilder.Entity("Bookstore.Domain.Customers.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("Sub")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Sub")
                        .IsUnique();

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Bookstore.Domain.Offers.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("BookPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("BookTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("ConditionId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("FrontUrl")
                        .HasColumnType("text");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OfferStatus")
                        .HasColumnType("integer");

                    b.Property<int>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookTypeId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GenreId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Offer");
                });

            modelBuilder.Entity("Bookstore.Domain.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Bookstore.Domain.Orders.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Bookstore.Domain.ReferenceData.ReferenceDataItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ReferenceData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5466),
                            DataType = 2,
                            Text = "Hardcover",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5469)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5474),
                            DataType = 2,
                            Text = "Trade Paperback",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5474)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5476),
                            DataType = 2,
                            Text = "Mass Market Paperback",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5476)
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5478),
                            DataType = 1,
                            Text = "New",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5478)
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5479),
                            DataType = 1,
                            Text = "Like New",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5480)
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5481),
                            DataType = 1,
                            Text = "Good",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5482)
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5483),
                            DataType = 1,
                            Text = "Acceptable",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5483)
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5484),
                            DataType = 3,
                            Text = "Biographies",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5485)
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5486),
                            DataType = 3,
                            Text = "Children's Books",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5486)
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5487),
                            DataType = 3,
                            Text = "History",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5488)
                        },
                        new
                        {
                            Id = 11,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5489),
                            DataType = 3,
                            Text = "Literature & Fiction",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5489)
                        },
                        new
                        {
                            Id = 12,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5491),
                            DataType = 3,
                            Text = "Mystery, Thriller & Suspense",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5491)
                        },
                        new
                        {
                            Id = 13,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5492),
                            DataType = 3,
                            Text = "Science Fiction & Fantasy",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5493)
                        },
                        new
                        {
                            Id = 14,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5494),
                            DataType = 3,
                            Text = "Travel",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5494)
                        },
                        new
                        {
                            Id = 15,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5495),
                            DataType = 0,
                            Text = "Arcadia Books",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5496)
                        },
                        new
                        {
                            Id = 16,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5497),
                            DataType = 0,
                            Text = "Astral Publishing",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5497)
                        },
                        new
                        {
                            Id = 17,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5498),
                            DataType = 0,
                            Text = "Moonlight Publishing",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5499)
                        },
                        new
                        {
                            Id = 18,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5500),
                            DataType = 0,
                            Text = "Dreamscape Press",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5501)
                        },
                        new
                        {
                            Id = 19,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5501),
                            DataType = 0,
                            Text = "Enchanted Library",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5502)
                        },
                        new
                        {
                            Id = 20,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5503),
                            DataType = 0,
                            Text = "Fantasia House",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5503)
                        },
                        new
                        {
                            Id = 21,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5504),
                            DataType = 0,
                            Text = "Horizon Books",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5505)
                        },
                        new
                        {
                            Id = 22,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5506),
                            DataType = 0,
                            Text = "Infinity Press",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5506)
                        },
                        new
                        {
                            Id = 23,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5507),
                            DataType = 0,
                            Text = "Paradigm Publishing",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5508)
                        },
                        new
                        {
                            Id = 24,
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5509),
                            DataType = 0,
                            Text = "Aurora Publishing",
                            UpdatedOn = new DateTime(2025, 6, 24, 17, 15, 10, 177, DateTimeKind.Utc).AddTicks(5510)
                        });
                });

            modelBuilder.Entity("Bookstore.Domain.Addresses.Address", b =>
                {
                    b.HasOne("Bookstore.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Bookstore.Domain.Books.Book", b =>
                {
                    b.HasOne("Bookstore.Domain.ReferenceData.ReferenceDataItem", "BookType")
                        .WithMany()
                        .HasForeignKey("BookTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Bookstore.Domain.ReferenceData.ReferenceDataItem", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Bookstore.Domain.ReferenceData.ReferenceDataItem", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Bookstore.Domain.ReferenceData.ReferenceDataItem", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BookType");

                    b.Navigation("Condition");

                    b.Navigation("Genre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Bookstore.Domain.Carts.ShoppingCartItem", b =>
                {
                    b.HasOne("Bookstore.Domain.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookstore.Domain.Carts.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Bookstore.Domain.Offers.Offer", b =>
                {
                    b.HasOne("Bookstore.Domain.ReferenceData.ReferenceDataItem", "BookType")
                        .WithMany()
                        .HasForeignKey("BookTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Bookstore.Domain.ReferenceData.ReferenceDataItem", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Bookstore.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookstore.Domain.ReferenceData.ReferenceDataItem", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Bookstore.Domain.ReferenceData.ReferenceDataItem", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BookType");

                    b.Navigation("Condition");

                    b.Navigation("Customer");

                    b.Navigation("Genre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Bookstore.Domain.Orders.Order", b =>
                {
                    b.HasOne("Bookstore.Domain.Addresses.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookstore.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Bookstore.Domain.Orders.OrderItem", b =>
                {
                    b.HasOne("Bookstore.Domain.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookstore.Domain.Orders.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Bookstore.Domain.Carts.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("Bookstore.Domain.Orders.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
